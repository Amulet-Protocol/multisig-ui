{"version":3,"sources":["components/Notification.tsx","utils/idl.ts","components/Multisig.tsx","store/index.ts","components/Header.tsx","components/Footer.tsx","components/Layout.tsx","App.tsx","reportWebVitals.ts","index.tsx","store/reducer.ts","idl/index.ts","components/WalletProvider.tsx"],"names":["ViewTransactionOnExplorerButton","props","signature","explorerClusterSuffix","useSelector","state","common","network","urlSuffix","color","component","target","rel","href","IDL_INSTRUCTION_LAYOUT","rustEnum","struct","encodeInstruction","i","buffer","Buffer","alloc","len","encode","concat","IDL_TAG","slice","from","reverse","Multisig","multisig","fixed","maxWidth","style","position","bottom","right","display","flexDirection","NewMultisigButton","MultisigInstance","useState","open","setOpen","border","width","height","borderRadius","onClick","NewMultisigDialog","onClose","multisigClient","useWallet","undefined","multisigAccount","setMultisigAccount","transactions","setTransactions","showSignerDialog","setShowSignerDialog","showAddTransactionDialog","setShowAddTransactionDialog","forceRefresh","setForceRefresh","useEffect","account","then","catch","err","console","error","transaction","all","toBuffer","txs","subscribe","on","marginBottom","marginTop","padding","marginLeft","marginRight","textAlign","elevation","variant","flexGrow","toString","threshold","owners","length","title","arrow","disablePadding","primary","map","tx","TxListItem","publicKey","AddTransactionDialog","didAddTransaction","SignerDialog","history","useHistory","enqueueSnackbar","useSnackbar","setThreshold","zeroAddr","PublicKey","participants","setParticipants","_onClose","createMultisig","a","Account","ownerSize","multisigSize","findProgramAddress","programId","nonce","p","rpc","BN","rent","SYSVAR_RENT_PUBKEY","createInstruction","accounts","signers","instructions","action","push","fullWidth","label","value","type","onChange","e","parseInt","idx","justifyContent","str","txAccount","setTxAccount","rows","field","didExecute","wordBreak","background","float","encodeBase64","data","ownerSetSeqno","msAccountRows","owner","approve","provider","wallet","execute","multisigSigner","executeTransaction","remainingAccounts","t","pubkey","equals","isSigner","isWritable","button","icon","ixLabel","in","timeout","unmountOnExit","errStr","align","r","AccountsList","BPF_LOADER_UPGRADEABLE_PID","secondary","coder","sighash","idl","signer","setSigner","addrNonce","paddingBottom","networks","mainnet","multisigUpgradeAuthority","ProgramUpdateListItem","IdlUpgradeListItem","MultisigSetOwnersListItem","ChangeThresholdListItem","ChangeThresholdListItemDetails","changeThreshold","changeThresholdData","proposer","createTransaction","paddingLeft","paddingRight","SetOwnersListItemDetails","setOwners","setOwnersData","UpgradeIdlListItemDetails","setProgramId","setBuffer","createTransactionAccount","programAddr","bufferAddr","anchor","idlAddress","idlAddr","accs","UpgradeProgramListItemDetails","connection","getAccountInfo","programAccount","Error","programdataAddress","spill","SYSVAR_CLOCK_PUBKEY","instruction","store","createStore","reducer","Header","multisigAddress","setMultisigAddress","disabled","addr","_","isValidPubkey","searchFn","AppBar","boxShadow","borderBottom","Toolbar","flex","SerumLogoButton","BarButton","hrefClient","backgroundColor","outlineWidth","placeholder","onKeyPress","key","IconButton","NetworkSelector","UserSelector","WalletConnectButton","Button","alt","src","Link","textDecoration","Typography","fontSize","dispatch","useDispatch","anchorEl","setAnchorEl","handleClose","currentTarget","Menu","Boolean","Object","keys","n","MenuItem","ActionType","CommonSetNetwork","item","networkKey","Select","displayEmpty","renderValue","overflow","disconnect","showDisconnect","isWalletConnected","autoHideDuration","CommonWalletDidDisconnect","CommonTriggerShutdown","CommonWalletDidConnect","connect","Footer","zIndex","borderTop","FooterButton","isEnd","Layout","refresh","setRefresh","minHeight","RiskBar","window","localStorage","getItem","children","RiskDisclosureForm","onConsent","setItem","MultisigPage","location","hash","MultisigInstancePage","path","useLocation","pathname","split","App","theme","createMuiTheme","palette","default","typography","fontFamily","join","overrides","CssBaseline","maxSnack","WalletProvider","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","initialState","newState","CommonWalletSetProvider","walletProvider","url","multisigProgramId","devnet","localhost","version","name","isMut","args","vec","defined","kind","fields","types","errors","code","msg","w","useContext","WalletContext","React","createContext","useMemo","opts","preflightCommitment","commitment","Connection","Wallet","Provider","Program","MultisigIdl"],"mappings":"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","file":"static/js/main.19124fc6.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Button from \"@material-ui/core/Button\";\nimport { TransactionSignature } from \"@solana/web3.js\";\nimport { State as StoreState } from \"../store/reducer\";\n\ntype Props = {\n  signature: string;\n};\n\nexport async function withTx(\n  snack: any,\n  beforeLabel: string,\n  afterLabel: string,\n  execTx: () => Promise<TransactionSignature>\n) {\n  snack.enqueueSnackbar(beforeLabel, {\n    variant: \"info\",\n  });\n  try {\n    let tx = await execTx();\n    snack.closeSnackbar();\n    snack.enqueueSnackbar(afterLabel, {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  } catch (err) {\n    snack.enqueueSnackbar(`Error: ${err.toString()}`, {\n      variant: \"error\",\n    });\n  }\n}\n\nexport function ViewTransactionOnExplorerButton(props: Props) {\n  const { signature } = props;\n  const { explorerClusterSuffix } = useSelector((state: StoreState) => {\n    return {\n      explorerClusterSuffix: state.common.network.explorerClusterSuffix,\n    };\n  });\n  const urlSuffix = `?cluster=${explorerClusterSuffix}`;\n  return (\n    <Button\n      color=\"inherit\"\n      component=\"a\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      href={`https://explorer.solana.com/tx/${signature}` + urlSuffix}\n    >\n      View on Solana Explorer\n    </Button>\n  );\n}\n","import { struct, Layout } from \"buffer-layout\";\nimport { rustEnum } from \"@project-serum/borsh\";\n\n// Simplified since we only use the SetBuffer variant.\nexport type IdlInstruction =\n  | Create\n  | CreateBuffer\n  | Write\n  | SetBuffer\n  | SetAuthority;\n\ntype Create = {};\ntype CreateBuffer = {};\ntype Write = {};\ntype SetBuffer = {};\ntype SetAuthority = {};\n\nconst IDL_INSTRUCTION_LAYOUT: Layout<IdlInstruction> = rustEnum([\n  struct([], \"create\"),\n  struct([], \"createBuffer\"),\n  struct([], \"write\"),\n  struct([], \"setBuffer\"),\n  struct([], \"setAuthority\"),\n]);\n\nexport function encodeInstruction(i: IdlInstruction): Buffer {\n  const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n  const len = IDL_INSTRUCTION_LAYOUT.encode(i, buffer);\n  return Buffer.concat([IDL_TAG, buffer.slice(0, len)]);\n}\n\n// Reverse for little endian.\nexport const IDL_TAG = Buffer.from(\"0a69e9a778bcf440\", \"hex\").reverse();\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useSnackbar } from \"notistack\";\nimport { encode as encodeBase64 } from \"js-base64\";\nimport Container from \"@material-ui/core/Container\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport GavelIcon from \"@material-ui/icons/Gavel\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport Paper from \"@material-ui/core/Paper\";\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport BuildIcon from \"@material-ui/icons/Build\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport List from \"@material-ui/core/List\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport BN from \"bn.js\";\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from \"@solana/web3.js\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { useWallet } from \"./WalletProvider\";\nimport { ViewTransactionOnExplorerButton } from \"./Notification\";\nimport * as idl from \"../utils/idl\";\nimport { networks } from \"../store/reducer\";\n\nexport default function Multisig({ multisig }: { multisig?: PublicKey }) {\n  return (\n    <div>\n      <Container fixed maxWidth=\"md\">\n        <div\n          style={{\n            position: \"fixed\",\n            bottom: \"75px\",\n            right: \"75px\",\n            display: \"flex\",\n            flexDirection: \"row-reverse\",\n          }}\n        >\n          <NewMultisigButton />\n        </div>\n      </Container>\n      {multisig && <MultisigInstance multisig={multisig} />}\n    </div>\n  );\n}\n\nfunction NewMultisigButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <div style={{ display: \"flex\" }}>\n      <IconButton\n        style={{\n          border: \"solid 1pt #ccc\",\n          width: \"60px\",\n          height: \"60px\",\n          borderRadius: \"30px\",\n        }}\n        onClick={() => setOpen(true)}\n      >\n        <AddIcon />\n      </IconButton>\n      <NewMultisigDialog open={open} onClose={() => setOpen(false)} />\n    </div>\n  );\n}\n\nexport function MultisigInstance({ multisig }: { multisig: PublicKey }) {\n  const { multisigClient } = useWallet();\n  const [multisigAccount, setMultisigAccount] = useState<any>(undefined);\n  const [transactions, setTransactions] = useState<any>(null);\n  const [showSignerDialog, setShowSignerDialog] = useState(false);\n  const [showAddTransactionDialog, setShowAddTransactionDialog] = useState(\n    false\n  );\n  const [forceRefresh, setForceRefresh] = useState(false);\n  useEffect(() => {\n    multisigClient.account\n      .multisig(multisig)\n      .then((account: any) => {\n        setMultisigAccount(account);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        setMultisigAccount(null);\n      });\n  }, [multisig, multisigClient.account]);\n  useEffect(() => {\n    multisigClient.account.transaction.all(multisig.toBuffer()).then((txs) => {\n      setTransactions(txs);\n    });\n  }, [multisigClient.account.transaction, multisig, forceRefresh]);\n  useEffect(() => {\n    multisigClient.account.multisig\n      .subscribe(multisig)\n      .on(\"change\", (account) => {\n        setMultisigAccount(account);\n      });\n  }, [multisigClient, multisig]);\n  return (\n    <Container fixed maxWidth=\"md\" style={{ marginBottom: \"16px\" }}>\n      <div>\n        <Card style={{ marginTop: \"24px\" }}>\n          {multisigAccount === undefined ? (\n            <div style={{ padding: \"16px\" }}>\n              <CircularProgress\n                style={{\n                  display: \"block\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                }}\n              />\n            </div>\n          ) : multisigAccount === null ? (\n            <CardContent>\n              <Typography\n                color=\"textSecondary\"\n                style={{\n                  padding: \"24px\",\n                  textAlign: \"center\",\n                }}\n              >\n                Multisig not found\n              </Typography>\n            </CardContent>\n          ) : (\n            <></>\n          )}\n        </Card>\n        {multisigAccount && (\n          <Paper>\n            <AppBar\n              style={{ marginTop: \"24px\" }}\n              position=\"static\"\n              color=\"default\"\n              elevation={1}\n            >\n              <Toolbar>\n                <Typography variant=\"h6\" style={{ flexGrow: 1 }} component=\"h2\">\n                  {multisig.toString()} | {multisigAccount.threshold.toString()}{\" \"}\n                  of {multisigAccount.owners.length.toString()} Multisig\n                </Typography>\n                <Tooltip title=\"Signer\" arrow>\n                  <IconButton onClick={() => setShowSignerDialog(true)}>\n                    <InfoIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Add\" arrow>\n                  <IconButton onClick={() => setShowAddTransactionDialog(true)}>\n                    <AddIcon />\n                  </IconButton>\n                </Tooltip>\n              </Toolbar>\n            </AppBar>\n            <List disablePadding>\n              {transactions === null ? (\n                <div style={{ padding: \"16px\" }}>\n                  <CircularProgress\n                    style={{\n                      display: \"block\",\n                      marginLeft: \"auto\",\n                      marginRight: \"auto\",\n                    }}\n                  />\n                </div>\n              ) : transactions.length === 0 ? (\n                <ListItem>\n                  <ListItemText primary=\"No transactions found\" />\n                </ListItem>\n              ) : (\n                transactions.map((tx: any) => (\n                  <TxListItem\n                    key={tx.publicKey.toString()}\n                    multisig={multisig}\n                    multisigAccount={multisigAccount}\n                    tx={tx}\n                  />\n                ))\n              )}\n            </List>\n          </Paper>\n        )}\n      </div>\n      <AddTransactionDialog\n        multisig={multisig}\n        open={showAddTransactionDialog}\n        onClose={() => setShowAddTransactionDialog(false)}\n        didAddTransaction={() => setForceRefresh(!forceRefresh)}\n      />\n      {multisigAccount && (\n        <SignerDialog\n          multisig={multisig}\n          multisigAccount={multisigAccount}\n          open={showSignerDialog}\n          onClose={() => setShowSignerDialog(false)}\n        />\n      )}\n    </Container>\n  );\n}\n\nexport function NewMultisigDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  const history = useHistory();\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const [threshold, setThreshold] = useState(2);\n  // @ts-ignore\n  const zeroAddr = new PublicKey().toString();\n  const [participants, setParticipants] = useState([zeroAddr]);\n  const _onClose = () => {\n    onClose();\n    setThreshold(2);\n    setParticipants([zeroAddr, zeroAddr]);\n  };\n  const createMultisig = async () => {\n    enqueueSnackbar(\"Creating multisig\", {\n      variant: \"info\",\n    });\n    const multisig = new Account();\n    // Disc. + threshold + nonce.\n    const baseSize = 8 + 8 + 1;\n    // Can only grow the participant set by 2x the initialized value.\n    const ownerSize = participants.length * 2 * 32 + 8;\n    const multisigSize = baseSize + ownerSize;\n    const [, nonce] = await PublicKey.findProgramAddress(\n      [multisig.publicKey.toBuffer()],\n      multisigClient.programId\n    );\n    const owners = participants.map((p) => new PublicKey(p));\n    const tx = await multisigClient.rpc.createMultisig(\n      owners,\n      new BN(threshold),\n      nonce,\n      {\n        accounts: {\n          multisig: multisig.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [multisig],\n        instructions: [\n          await multisigClient.account.multisig.createInstruction(\n            multisig,\n            // @ts-ignore\n            multisigSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(`Multisig created: ${multisig.publicKey.toString()}`, {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    _onClose();\n    history.push(`/${multisig.publicKey.toString()}`);\n  };\n  return (\n    <Dialog fullWidth open={open} onClose={_onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Multisig\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          fullWidth\n          label=\"Threshold\"\n          value={threshold}\n          type=\"number\"\n          onChange={(e) => setThreshold(parseInt(e.target.value) as number)}\n        />\n        {participants.map((p, idx) => (\n          <TextField\n            key={p}\n            fullWidth\n            label=\"Participant\"\n            value={p}\n            onChange={(e) => {\n              const p = [...participants];\n              p[idx] = e.target.value;\n              setParticipants(p);\n            }}\n          />\n        ))}\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <IconButton\n            onClick={() => {\n              const p = [...participants];\n              // @ts-ignore\n              p.push(new PublicKey().toString());\n              setParticipants(p);\n            }}\n          >\n            <AddIcon />\n          </IconButton>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={_onClose}>Cancel</Button>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          onClick={() =>\n            createMultisig().catch((err) => {\n              const str = err ? err.toString() : \"\";\n              enqueueSnackbar(`Error creating multisig: ${str}`, {\n                variant: \"error\",\n              });\n            })\n          }\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction TxListItem({\n  multisig,\n  multisigAccount,\n  tx,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  tx: any;\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n  const { multisigClient } = useWallet();\n  const [open, setOpen] = useState(false);\n  const [txAccount, setTxAccount] = useState(tx.account);\n  useEffect(() => {\n    multisigClient.account.transaction\n      .subscribe(tx.publicKey)\n      .on(\"change\", (account) => {\n        setTxAccount(account);\n      });\n  }, [multisigClient, multisig, tx.publicKey]);\n  const rows = [\n    {\n      field: \"Program ID\",\n      value: txAccount.programId.toString(),\n    },\n    {\n      field: \"Did execute\",\n      value: txAccount.didExecute.toString(),\n    },\n    {\n      field: \"Instruction data\",\n      value: (\n        <code\n          style={{\n            wordBreak: \"break-word\",\n            width: \"370px\",\n            background: \"black\",\n            color: \"#ffffff\",\n            float: \"right\",\n            textAlign: \"left\",\n          }}\n        >\n          {encodeBase64(txAccount.data)}\n        </code>\n      ),\n    },\n    {\n      field: \"Multisig\",\n      value: txAccount.multisig.toString(),\n    },\n    {\n      field: \"Transaction account\",\n      value: tx.publicKey.toString(),\n    },\n    {\n      field: \"Owner set seqno\",\n      value: txAccount.ownerSetSeqno.toString(),\n    },\n  ];\n  const msAccountRows = multisigAccount.owners.map(\n    (owner: PublicKey, idx: number) => {\n      return {\n        field: owner.toString(),\n        value: txAccount.signers[idx] ? <CheckIcon /> : <RemoveIcon />,\n      };\n    }\n  );\n  const approve = async () => {\n    enqueueSnackbar(\"Approving transaction\", {\n      variant: \"info\",\n    });\n    await multisigClient.rpc.approve({\n      accounts: {\n        multisig,\n        transaction: tx.publicKey,\n        owner: multisigClient.provider.wallet.publicKey,\n      },\n    });\n    enqueueSnackbar(\"Transaction approved\", {\n      variant: \"success\",\n    });\n  };\n  const execute = async () => {\n    enqueueSnackbar(\"Executing transaction\", {\n      variant: \"info\",\n    });\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    await multisigClient.rpc.executeTransaction({\n      accounts: {\n        multisig,\n        multisigSigner,\n        transaction: tx.publicKey,\n      },\n      remainingAccounts: txAccount.accounts\n        .map((t: any) => {\n          if (t.pubkey.equals(multisigSigner)) {\n            return { ...t, isSigner: false };\n          }\n          return t;\n        })\n        .concat({\n          pubkey: txAccount.programId,\n          isWritable: false,\n          isSigner: false,\n        }),\n    });\n    enqueueSnackbar(\"Transaction executed\", {\n      variant: \"success\",\n    });\n  };\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)}>\n        <ListItemIcon>{icon(tx, multisigClient)}</ListItemIcon>\n        {ixLabel(tx, multisigClient)}\n        {txAccount.didExecute && (\n          <CheckCircleIcon style={{ marginRight: \"16px\" }} />\n        )}\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <div style={{ background: \"#ececec\", padding: \"10px\" }}>\n          <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n            <Button\n              style={{ marginRight: \"10px\" }}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() =>\n                approve().catch((err) => {\n                  let errStr = \"\";\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to approve transaction: ${errStr}`, {\n                    variant: \"error\",\n                  });\n                })\n              }\n            >\n              Approve\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() =>\n                execute().catch((err) => {\n                  let errStr = \"\";\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to execute transaction: ${errStr}`, {\n                    variant: \"error\",\n                  });\n                })\n              }\n            >\n              Execute\n            </Button>\n          </div>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Transaction Field</TableCell>\n                    <TableCell align=\"right\">Value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map((r) => (\n                    <TableRow>\n                      <TableCell>{r.field}</TableCell>\n                      <TableCell align=\"right\">{r.value}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Multisig Owner</TableCell>\n                    <TableCell align=\"right\">Did Sign</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {txAccount.ownerSetSeqno === multisigAccount.ownerSetSeqno &&\n                    msAccountRows.map((r: any) => (\n                      <TableRow>\n                        <TableCell>{r.field}</TableCell>\n                        <TableCell align=\"right\">{r.value}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n              {txAccount.ownerSetSeqno !== multisigAccount.ownerSetSeqno && (\n                <div style={{ marginTop: \"16px\" }}>\n                  <Typography\n                    color=\"textSecondary\"\n                    style={{ textAlign: \"center\" }}\n                  >\n                    The owner set has changed since this transaction was created\n                  </Typography>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <AccountsList accounts={txAccount.accounts} />\n            </CardContent>\n          </Card>\n        </div>\n      </Collapse>\n    </>\n  );\n}\n\nfunction ixLabel(tx: any, multisigClient: any) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    // Upgrade instruction.\n    if (tx.account.data.equals(Buffer.from([3, 0, 0, 0]))) {\n      return (\n        <ListItemText\n          primary=\"Program upgrade\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"change_threshold\"\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set threshold\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"set_owners\"\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set owners\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return (\n      <ListItemText primary=\"Upgrade IDL\" secondary={tx.publicKey.toString()} />\n    );\n  }\n  return <ListItemText primary={tx.publicKey.toString()} />;\n}\n\nfunction AccountsList({ accounts }: { accounts: any }) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Account</TableCell>\n          <TableCell align=\"right\">Writable</TableCell>\n          <TableCell align=\"right\">Signer</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {accounts.map((r: any) => (\n          <TableRow>\n            <TableCell>{r.pubkey.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isWritable.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isSigner.toString()}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nfunction SignerDialog({\n  multisig,\n  multisigAccount,\n  open,\n  onClose,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  open: boolean;\n  onClose: () => void;\n}) {\n  const { multisigClient } = useWallet();\n  const [signer, setSigner] = useState<null | string>(null);\n  useEffect(() => {\n    PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    ).then((addrNonce) => setSigner(addrNonce[0].toString()));\n  }, [multisig, multisigClient.programId, setSigner]);\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          Multisig Info\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: \"16px\" }}>\n        {multisig?.equals(networks.mainnet.multisigUpgradeAuthority!) && (\n          <DialogContentText>\n            This multisig is the upgrade authority for the multisig program\n            itself.\n          </DialogContentText>\n        )}\n        <DialogContentText>\n          <b>Program derived address</b>: {signer}. This is the address one\n          should use as the authority for data governed by the multisig.\n        </DialogContentText>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Owners</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {multisigAccount.owners.map((r: any) => (\n              <TableRow>\n                <TableCell>{r.toString()}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction AddTransactionDialog({\n  multisig,\n  open,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  open: boolean;\n  onClose: () => void;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Transaction\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: \"16px\" }}>\n        <DialogContentText>\n          Create a new transaction to be signed by the multisig. This\n          transaction will not execute until enough owners have signed the\n          transaction.\n        </DialogContentText>\n        <List disablePadding>\n          <ProgramUpdateListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <IdlUpgradeListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <MultisigSetOwnersListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <ChangeThresholdListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </List>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction ChangeThresholdListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <GavelIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Change threshold\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <ChangeThresholdListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction ChangeThresholdListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [threshold, setThreshold] = useState(2);\n  const { multisigClient } = useWallet();\n  // @ts-ignore\n  const { enqueueSnackbar } = useSnackbar();\n  const changeThreshold = async () => {\n    enqueueSnackbar(\"Creating change threshold transaction\", {\n      variant: \"info\",\n    });\n    const data = changeThresholdData(multisigClient, threshold);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 1000; // todo\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: \"16px\" }}\n        label=\"Threshold\"\n        value={threshold}\n        type=\"number\"\n        onChange={(e) => {\n          // @ts-ignore\n          setThreshold(e.target.value);\n        }}\n      />\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <Button onClick={() => changeThreshold()}>Change Threshold</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction MultisigSetOwnersListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <SupervisorAccountIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Set owners\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <SetOwnersListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction SetOwnersListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const { multisigClient } = useWallet();\n  // @ts-ignore\n  const zeroAddr = new PublicKey().toString();\n  const [participants, setParticipants] = useState([zeroAddr]);\n  const { enqueueSnackbar } = useSnackbar();\n  const setOwners = async () => {\n    enqueueSnackbar(\"Creating setOwners transaction\", {\n      variant: \"info\",\n    });\n    const owners = participants.map((p) => new PublicKey(p));\n    const data = setOwnersData(multisigClient, owners);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 5000; // TODO: tighter bound.\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      {participants.map((p, idx) => (\n        <TextField\n          fullWidth\n          style={{ marginTop: \"16px\" }}\n          label=\"Participant\"\n          value={p}\n          onChange={(e) => {\n            const p = [...participants];\n            p[idx] = e.target.value;\n            setParticipants(p);\n          }}\n        />\n      ))}\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <IconButton\n          onClick={() => {\n            const p = [...participants];\n            // @ts-ignore\n            p.push(new PublicKey().toString());\n            setParticipants(p);\n          }}\n        >\n          <AddIcon />\n        </IconButton>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginTop: \"16px\",\n          paddingBottom: \"16px\",\n        }}\n      >\n        <Button onClick={() => setOwners()}>Set Owners</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction IdlUpgradeListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <DescriptionIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Upgrade IDL\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeIdlListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction UpgradeIdlListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar(\"Creating transaction\", {\n      variant: \"info\",\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    const idlAddr = await anchor.utils.idlAddress(programAddr);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const data = idl.encodeInstruction({ setBuffer: {} });\n    const accs = [\n      {\n        pubkey: bufferAddr,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: idlAddr, isWritable: true, isSigner: false },\n      { pubkey: multisigSigner, isWritable: true, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      programAddr,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: \"16px\" }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={(e) => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: \"16px\" }}\n        fullWidth\n        label=\"New IDL buffer\"\n        value={buffer}\n        onChange={(e) => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginTop: \"16px\",\n          paddingBottom: \"16px\",\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction ProgramUpdateListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <BuildIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Upgrade program\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeProgramListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nconst BPF_LOADER_UPGRADEABLE_PID = new PublicKey(\n  \"BPFLoaderUpgradeab1e11111111111111111111111\"\n);\n\nfunction UpgradeProgramListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar(\"Creating transaction\", {\n      variant: \"info\",\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    // Hard code serialization.\n    const data = Buffer.from([3, 0, 0, 0]);\n\n    const programAccount = await (async () => {\n      const programAccount = await multisigClient.provider.connection.getAccountInfo(\n        programAddr\n      );\n      if (programAccount === null) {\n        throw new Error(\"Invalid program ID\");\n      }\n      return {\n        // Hard code deserialization.\n        programdataAddress: new PublicKey(programAccount.data.slice(4)),\n      };\n    })();\n    const spill = multisigClient.provider.wallet.publicKey;\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const accs = [\n      {\n        pubkey: programAccount.programdataAddress,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: programAddr, isWritable: true, isSigner: false },\n      { pubkey: bufferAddr, isWritable: true, isSigner: false },\n      { pubkey: spill, isWritable: true, isSigner: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: multisigSigner, isWritable: false, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      BPF_LOADER_UPGRADEABLE_PID,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: \"16px\" }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={(e) => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: \"16px\" }}\n        fullWidth\n        label=\"New program buffer\"\n        value={buffer}\n        onChange={(e) => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginTop: \"16px\",\n          paddingBottom: \"16px\",\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// @ts-ignore\nfunction icon(tx, multisigClient) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    return <BuildIcon />;\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"change_threshold\"\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return <GavelIcon />;\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"set_owners\"\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return <SupervisorAccountIcon />;\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return <DescriptionIcon />;\n  }\n  return <ReceiptIcon />;\n}\n\n// @ts-ignore\nfunction changeThresholdData(multisigClient, threshold) {\n  return multisigClient.coder.instruction.encode(\"change_threshold\", {\n    threshold: new BN(threshold),\n  });\n}\n\n// @ts-ignore\nfunction setOwnersData(multisigClient, owners) {\n  return multisigClient.coder.instruction.encode(\"set_owners\", {\n    owners,\n  });\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nexport const store = createStore(reducer);\n","import React, { useState, useEffect, ReactElement } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSnackbar } from \"notistack\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Select from \"@material-ui/core/Select\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport Button from \"@material-ui/core/Button\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport BubbleChartIcon from \"@material-ui/icons/BubbleChart\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { networks, State as StoreState, ActionType } from \"../store/reducer\";\nimport { useWallet } from \"./WalletProvider\";\n\nexport default function Header() {\n  const { wallet } = useWallet();\n  const history = useHistory();\n  const [multisigAddress, setMultisigAddress] = useState(\"\");\n  const disabled = !isValidPubkey(multisigAddress);\n  const searchFn = () => {\n    history.push(`/${multisigAddress}`);\n  };\n  return (\n    <AppBar\n      position=\"static\"\n      style={{\n        background: \"#ffffff\",\n        color: \"#272727\",\n        boxShadow: \"none\",\n        borderBottom: \"solid 1pt #ccc\",\n      }}\n    >\n      <Toolbar>\n        <div\n          style={{\n            display: \"flex\",\n            width: \"100%\",\n          }}\n        >\n          <div style={{ display: \"flex\", flex: 1 }}>\n            <SerumLogoButton />\n            <BarButton label=\"Multisig\" hrefClient=\"/\" />\n            <BarButton label=\"Trade\" href=\"https://dex.projectserum.com\" />\n            <BarButton label=\"Stake\" href=\"https://stake.projectserum.com\" />\n            <BarButton\n              label=\"Lockup\"\n              href=\"https://stake.projectserum.com/#/lockup\"\n            />\n            <div\n              style={{\n                marginLeft: \"16px\",\n                marginRight: \"16px\",\n                borderRadius: \"25px\",\n                display: \"flex\",\n                flex: 1,\n                backgroundColor: \"rgb(245 245 245)\",\n              }}\n            >\n              <input\n                style={{\n                  flex: 1,\n                  background: \"none\",\n                  padding: \"16px\",\n                  border: \"none\",\n                  outlineWidth: 0,\n                  color: \"inherit\",\n                }}\n                placeholder=\"Search a multisig address...\"\n                value={multisigAddress}\n                onChange={(e) => setMultisigAddress(e.target.value as string)}\n                onKeyPress={(e) => {\n                  if (e.key === \"Enter\") {\n                    searchFn();\n                  }\n                }}\n              />\n              <IconButton disabled={disabled} onClick={searchFn}>\n                <SearchIcon />\n              </IconButton>\n            </div>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n            }}\n          >\n            <NetworkSelector />\n            {!wallet.publicKey ? (\n              <WalletConnectButton\n                style={{\n                  display: wallet.publicKey ? \"none\" : \"\",\n                }}\n              />\n            ) : (\n              <UserSelector />\n            )}\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nfunction SerumLogoButton() {\n  const history = useHistory();\n  return (\n    <div style={{ display: \"flex\" }} onClick={() => history.push(\"/\")}>\n      <Button color=\"inherit\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <img\n            style={{\n              display: \"block\",\n              height: \"35px\",\n            }}\n            alt=\"Logo\"\n            src=\"http://dex.projectserum.com/static/media/logo.49174c73.svg\"\n          />\n        </div>\n      </Button>\n    </div>\n  );\n}\n\ntype BarButtonProps = {\n  label: string;\n  hrefClient?: string;\n  href?: string;\n};\n\nfunction BarButton(props: BarButtonProps) {\n  const history = useHistory();\n  const { label, href, hrefClient } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n      }}\n      onClick={() => hrefClient && history.push(hrefClient)}\n    >\n      <Link\n        style={{ color: \"inherit\", textDecoration: \"none\" }}\n        href={href}\n        target=\"_blank\"\n      >\n        <Button color=\"inherit\">\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            <Typography style={{ fontSize: \"15px\" }}>{label}</Typography>\n          </div>\n        </Button>\n      </Link>\n    </div>\n  );\n}\n\nfunction NetworkSelector() {\n  const network = useSelector((state: StoreState) => {\n    return state.common.network;\n  });\n  const dispatch = useDispatch();\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div\n      style={{\n        marginRight: \"10px\",\n        fontSize: \"15px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Button\n        color=\"inherit\"\n        onClick={(e) =>\n          setAnchorEl(\n            // @ts-ignore\n            e.currentTarget\n          )\n        }\n      >\n        <BubbleChartIcon />\n        <Typography style={{ marginLeft: \"5px\", fontSize: \"15px\" }}>\n          {network.label}\n        </Typography>\n      </Button>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        style={{\n          marginLeft: \"12px\",\n          color: \"white\",\n        }}\n      >\n        {Object.keys(networks).map((n: string) => (\n          <MenuItem\n            key={n}\n            onClick={() => {\n              handleClose();\n              dispatch({\n                type: ActionType.CommonSetNetwork,\n                item: {\n                  network: networks[n],\n                  networkKey: n,\n                },\n              });\n            }}\n          >\n            <Typography>{networks[n].label}</Typography>\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n}\n\nfunction UserSelector() {\n  const { wallet } = useWallet();\n\n  return (\n    <Select\n      displayEmpty\n      renderValue={() => {\n        return (\n          <Typography style={{ overflow: \"hidden\" }}>\n            {wallet.publicKey.toString()}\n          </Typography>\n        );\n      }}\n      style={{\n        marginLeft: \"12px\",\n        width: \"150px\",\n      }}\n      onChange={(e) => {\n        if (e.target.value === \"disconnect\") {\n          wallet.disconnect();\n        }\n      }}\n    >\n      <MenuItem value=\"disconnect\">\n        <IconButton color=\"inherit\">\n          <ExitToAppIcon />\n          <Typography style={{ marginLeft: \"15px\" }}>Disconnect</Typography>\n        </IconButton>\n      </MenuItem>\n    </Select>\n  );\n}\n\ntype WalletConnectButtonProps = {\n  style?: any;\n};\n\nexport function WalletConnectButton(\n  props: WalletConnectButtonProps\n): ReactElement {\n  const { showDisconnect } = useSelector((state: StoreState) => {\n    return {\n      showDisconnect: state.common.isWalletConnected,\n    };\n  });\n  const dispatch = useDispatch();\n  const { wallet, multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Wallet connection event listeners.\n  useEffect(() => {\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Disconnected from wallet\", {\n        variant: \"info\",\n        autoHideDuration: 2500,\n      });\n      dispatch({\n        type: ActionType.CommonWalletDidDisconnect,\n        item: {},\n      });\n      dispatch({\n        type: ActionType.CommonTriggerShutdown,\n        item: {},\n      });\n    });\n    wallet.on(\"connect\", async () => {\n      dispatch({\n        type: ActionType.CommonWalletDidConnect,\n        item: {},\n      });\n    });\n  }, [wallet, dispatch, enqueueSnackbar, multisigClient.provider.connection]);\n\n  return showDisconnect ? (\n    <Button\n      style={props.style}\n      color=\"inherit\"\n      onClick={() => wallet.disconnect()}\n    >\n      <ExitToAppIcon />\n      <Typography style={{ marginLeft: \"5px\", fontSize: \"15px\" }}>\n        Disconnect\n      </Typography>\n    </Button>\n  ) : (\n    <Button\n      style={props.style}\n      color=\"inherit\"\n      onClick={() => wallet.connect()}\n    >\n      <PersonIcon />\n      <Typography style={{ marginLeft: \"5px\", fontSize: \"15px\" }}>\n        Connect wallet\n      </Typography>\n    </Button>\n  );\n}\n\nfunction isValidPubkey(addr: string): boolean {\n  try {\n    new PublicKey(addr);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\n\nexport default function Footer() {\n  return (\n    <div\n      style={{\n        zIndex: 99,\n        position: \"fixed\",\n        width: \"100%\",\n        bottom: 0,\n        textAlign: \"center\",\n        height: \"30px\",\n        backgroundColor: \"#fbfbfb\",\n        borderTop: \"solid 1pt #ccc\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        paddingLeft: \"10px\",\n        paddingRight: \"10px\",\n      }}\n    >\n      <div style={{ marginLeft: \"auto\", marginRight: \"auto\", display: \"flex\" }}>\n        <FooterButton\n          href={\"https://github.com/project-serum/multisig\"}\n          label={\"Source\"}\n        />\n        <FooterButton\n          href={\"https://github.com/project-serum/awesome-serum\"}\n          label={\"Developer Resources\"}\n        />\n        <FooterButton\n          href={\"https://discord.com/channels/739225212658122886\"}\n          label={\"Discord\"}\n        />\n        <FooterButton href={\"https://t.me/ProjectSerum\"} label={\"Telegram\"} />\n        <FooterButton\n          href={\"https://github.com/project-serum\"}\n          label={\"GitHub\"}\n        />\n        <FooterButton\n          href={\"https://solanabeach.io/\"}\n          label={\"Solana Network\"}\n          isEnd={true}\n        />\n      </div>\n    </div>\n  );\n}\n\ntype FooterButtonProps = {\n  label: string;\n  href: string;\n  isEnd?: boolean;\n};\n\nfunction FooterButton(props: FooterButtonProps) {\n  const { label, href, isEnd } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        marginRight: isEnd ? \"\" : \"15px\",\n      }}\n    >\n      <Link href={href} target=\"_blank\" color=\"inherit\">\n        <Typography style={{ fontSize: \"14px\" }}>{label}</Typography>\n      </Link>\n    </div>\n  );\n}\n","import React, { useState, PropsWithChildren } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\ntype Props = {};\n\nexport default function Layout(props: PropsWithChildren<Props>) {\n  const [refresh, setRefresh] = useState(false);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        minHeight: \"100vh\",\n        flexDirection: \"column\",\n        backgroundColor: \"rgb(251, 251, 251)\",\n      }}\n    >\n      <div\n        style={{\n          position: \"fixed\",\n          width: \"100%\",\n          zIndex: 99,\n        }}\n      >\n        <RiskBar />\n        <Header />\n      </div>\n      <div\n        style={{\n          width: \"100%\",\n          marginTop: \"94px\",\n          flex: 1,\n          display: \"flex\",\n          marginBottom: \"30px\", // Compensates for the fixed position footer.\n        }}\n      >\n        {window.localStorage.getItem(\"consent\") ? (\n          <div style={{ width: \"100%\" }}>{props.children}</div>\n        ) : (\n          <RiskDisclosureForm\n            onConsent={() => {\n              window.localStorage.setItem(\"consent\", \"true\");\n              setRefresh(!refresh);\n            }}\n          />\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nfunction RiskBar() {\n  return (\n    <div\n      style={{\n        color: \"#fff\",\n        backgroundColor: \"rgb(39, 39, 39)\",\n        height: \"30px\",\n        textAlign: \"center\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          height: \"100%\",\n        }}\n      >\n        <Typography style={{ fontSize: \"14px\" }}>\n          Multisig is unaudited software. Use at your own risk.\n        </Typography>\n      </div>\n    </div>\n  );\n}\n\nfunction RiskDisclosureForm({ onConsent }: { onConsent: () => void }) {\n  return (\n    <div\n      style={{\n        flex: \"1\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        textAlign: \"center\",\n      }}\n    >\n      <div style={{ width: \"100%\", display: \"flex\" }}>\n        <div\n          style={{ display: \"flex\", marginLeft: \"auto\", marginRight: \"auto\" }}\n        >\n          <Typography\n            style={{ marginBottom: \"16px\", maxWidth: \"1000px\" }}\n            color=\"textSecondary\"\n            variant=\"h4\"\n          >\n            No statement or warranty is provided in relation to the utility of\n            this program, the safety of its code or its suitability for your\n            use, and by using it, you agree to bear any risk associated with\n            such potential vulnerabilities, including, but not limited to the\n            potential loss of tokens.\n          </Typography>\n        </div>\n      </div>\n      <div style={{ display: \"flex\", marginLeft: \"auto\", marginRight: \"auto\" }}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onConsent}>\n          I agree\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from \"@material-ui/core/styles\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { store } from \"./store\";\nimport WalletProvider from \"./components/WalletProvider\";\nimport Layout from \"./components/Layout\";\nimport Multisig from \"./components/Multisig\";\nimport { networks } from \"./store/reducer\";\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      background: {\n        default: \"rgb(255,255,255)\",\n      },\n    },\n    typography: {\n      fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n    },\n    overrides: {},\n  });\n  return (\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n          <WalletProvider>\n            <HashRouter basename={\"/\"}>\n              <Layout>\n                <Route exact path=\"/\" component={MultisigPage} />\n                <Route\n                  exact\n                  path=\"/:address\"\n                  component={MultisigInstancePage}\n                />\n              </Layout>\n            </HashRouter>\n          </WalletProvider>\n        </SnackbarProvider>\n      </MuiThemeProvider>\n    </Provider>\n  );\n}\n\nfunction MultisigPage() {\n  const { hash } = window.location;\n  if (hash) {\n    window.location.href = `/#/${networks.mainnet.multisigUpgradeAuthority!.toString()}`;\n  }\n  const multisig = networks.mainnet.multisigUpgradeAuthority;\n  return <Multisig multisig={multisig} />;\n}\n\nexport function MultisigInstancePage() {\n  const history = useHistory();\n  const location = useLocation();\n  const path = location.pathname.split(\"/\");\n  if (path.length !== 2) {\n    history.push(`/multisig`);\n    return <></>;\n  } else {\n    const multisig = new PublicKey(path[1]);\n    return <Multisig multisig={multisig} />;\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport type Action = {\n  type: ActionType;\n  item: any;\n};\n\nexport enum ActionType {\n  CommonTriggerShutdown,\n  CommonDidShutdown,\n  CommonWalletDidConnect,\n  CommonWalletDidDisconnect,\n  CommonWalletSetProvider,\n  CommonSetNetwork,\n}\n\nexport default function reducer(\n  state: State = initialState,\n  action: Action\n): State {\n  let newState = {\n    common: { ...state.common },\n  };\n  switch (action.type) {\n    case ActionType.CommonWalletSetProvider:\n      newState.common.walletProvider = action.item.walletProvider;\n      return newState;\n    case ActionType.CommonWalletDidConnect:\n      newState.common.isWalletConnected = true;\n      return newState;\n    case ActionType.CommonWalletDidDisconnect:\n      newState.common.isWalletConnected = false;\n      return newState;\n    case ActionType.CommonSetNetwork:\n      if (newState.common.network.label !== action.item.network.label) {\n        newState.common.network = action.item.network;\n      }\n      return newState;\n    default:\n      return newState;\n  }\n}\n\nexport type State = {\n  common: CommonState;\n};\n\nexport type CommonState = {\n  walletProvider?: string;\n  isWalletConnected: boolean;\n  network: Network;\n};\n\nexport const networks: Networks = {\n  mainnet: {\n    // Cluster.\n    label: \"Mainnet Beta\",\n    url: \"https://solana-api.projectserum.com\",\n    explorerClusterSuffix: \"\",\n    multisigProgramId: new PublicKey(\n      \"A9HAbnCwoD6f2NkZobKFf6buJoN9gUVVvX5PoUnDHS6u\"\n    ),\n    multisigUpgradeAuthority: new PublicKey(\n      \"3uztpEgUmvirDBYRXgDamUDZiU5EcgTwArQ2pULtHJPC\"\n    ),\n  },\n  devnet: {\n    // Cluster.\n    label: \"Devnet\",\n    url: \"https://devnet.solana.com\",\n    explorerClusterSuffix: \"devnet\",\n    multisigProgramId: new PublicKey(\n      \"F3Uf5F61dmht1xuNNNkk3jnzj82TY56vVjVEhZALRkN\"\n    ),\n  },\n  // Fill in with your local cluster addresses.\n  localhost: {\n    // Cluster.\n    label: \"Localhost\",\n    url: \"http://localhost:8899\",\n    explorerClusterSuffix: \"localhost\",\n    multisigProgramId: new PublicKey(\n      \"9z7Pq56To96qbVLzuBcf47Lc7u8uUWZh6k5rhcaTsDjz\"\n    ),\n  },\n};\n\nexport const initialState: State = {\n  common: {\n    isWalletConnected: false,\n    walletProvider: \"https://www.sollet.io\",\n    network: networks.mainnet,\n  },\n};\n\ntype Networks = { [label: string]: Network };\n\nexport type Network = {\n  // Cluster.\n  label: string;\n  url: string;\n  explorerClusterSuffix: string;\n  multisigProgramId: PublicKey;\n  multisigUpgradeAuthority?: PublicKey;\n};\n","import { Idl } from \"@project-serum/anchor\";\n\nconst idl: Idl = {\n  version: \"0.0.0\",\n  name: \"multisig\",\n  instructions: [\n    {\n      name: \"createMultisig\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"owners\",\n          type: {\n            vec: \"publicKey\",\n          },\n        },\n        {\n          name: \"threshold\",\n          type: \"u64\",\n        },\n        {\n          name: \"nonce\",\n          type: \"u8\",\n        },\n      ],\n    },\n    {\n      name: \"createTransaction\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"proposer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"pid\",\n          type: \"publicKey\",\n        },\n        {\n          name: \"accs\",\n          type: {\n            vec: {\n              defined: \"TransactionAccount\",\n            },\n          },\n        },\n        {\n          name: \"data\",\n          type: \"bytes\",\n        },\n      ],\n    },\n    {\n      name: \"approve\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"owner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"setOwners\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"owners\",\n          type: {\n            vec: \"publicKey\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"changeThreshold\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"threshold\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"executeTransaction\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"Multisig\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"owners\",\n            type: {\n              vec: \"publicKey\",\n            },\n          },\n          {\n            name: \"threshold\",\n            type: \"u64\",\n          },\n          {\n            name: \"nonce\",\n            type: \"u8\",\n          },\n          {\n            name: \"ownerSetSeqno\",\n            type: \"u32\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"Transaction\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"multisig\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"programId\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"accounts\",\n            type: {\n              vec: {\n                defined: \"TransactionAccount\",\n              },\n            },\n          },\n          {\n            name: \"data\",\n            type: \"bytes\",\n          },\n          {\n            name: \"signers\",\n            type: {\n              vec: \"bool\",\n            },\n          },\n          {\n            name: \"didExecute\",\n            type: \"bool\",\n          },\n          {\n            name: \"ownerSetSeqno\",\n            type: \"u32\",\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"TransactionAccount\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"pubkey\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"isSigner\",\n            type: \"bool\",\n          },\n          {\n            name: \"isWritable\",\n            type: \"bool\",\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: \"InvalidOwner\",\n      msg: \"The given owner is not part of this multisig.\",\n    },\n    {\n      code: 101,\n      name: \"NotEnoughSigners\",\n      msg: \"Not enough owners signed this transaction.\",\n    },\n    {\n      code: 102,\n      name: \"TransactionAlreadySigned\",\n      msg: \"Cannot delete a transaction that has been signed by an owner.\",\n    },\n    {\n      code: 103,\n      name: \"Overflow\",\n      msg: \"Overflow when adding.\",\n    },\n    {\n      code: 104,\n      name: \"UnableToDelete\",\n      msg: \"Cannot delete a transaction the owner did not create.\",\n    },\n    {\n      code: 105,\n      name: \"AlreadyExecuted\",\n      msg: \"The given transaction has already been executed.\",\n    },\n    {\n      code: 106,\n      name: \"InvalidThreshold\",\n      msg: \"Threshold must be less than or equal to the number of owners.\",\n    },\n  ],\n};\n\nexport default idl;\n","import React, {\n  PropsWithChildren,\n  ReactElement,\n  ReactNode,\n  useMemo,\n  useContext,\n} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Connection, ConfirmOptions } from \"@solana/web3.js\";\n// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { Provider } from \"@project-serum/common\";\nimport { Program } from \"@project-serum/anchor\";\nimport { State as StoreState } from \"../store/reducer\";\nimport MultisigIdl from \"../idl\";\n\nexport function useWallet(): WalletContextValues {\n  const w = useContext(WalletContext);\n  if (!w) {\n    throw new Error(\"Missing wallet context\");\n  }\n  // @ts-ignore\n  return w;\n}\n\nconst WalletContext = React.createContext<null | WalletContextValues>(null);\n\ntype WalletContextValues = {\n  wallet: Wallet;\n  multisigClient: Program;\n};\n\nexport default function WalletProvider(\n  props: PropsWithChildren<ReactNode>\n): ReactElement {\n  const { walletProvider, network } = useSelector((state: StoreState) => {\n    return {\n      walletProvider: state.common.walletProvider,\n      network: state.common.network,\n    };\n  });\n\n  const { wallet, multisigClient } = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const connection = new Connection(network.url, opts.preflightCommitment);\n    const wallet = new Wallet(walletProvider, network.url);\n    const provider = new Provider(connection, wallet, opts);\n\n    const multisigClient = new Program(\n      MultisigIdl,\n      network.multisigProgramId,\n      provider\n    );\n\n    return {\n      wallet,\n      multisigClient,\n    };\n  }, [walletProvider, network]);\n\n  return (\n    <WalletContext.Provider value={{ wallet, multisigClient }}>\n      {props.children}\n    </WalletContext.Provider>\n  );\n}\n"],"sourceRoot":""}